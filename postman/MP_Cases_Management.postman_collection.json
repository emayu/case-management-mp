{
	"info": {
		"_postman_id": "698c4802-97c0-46a3-b567-30e2fa6cbf4b",
		"name": "MP Cases Management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31643916"
	},
	"item": [
		{
			"name": "0. Pre-Login auth test",
			"item": [
				{
					"name": "Required contrasenia [Test]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(401);//no autorizado\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The Note has created correct\", function () {\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"});\r",
									"\r",
									"const expectedResponse = {\r",
									"    \"status\": \"fail\",\r",
									"    \"message\": \"Credenciales inválidas\"\r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"correo\": \"foo\",\r\n    \"contrasena\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/login",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad credencials [Test]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(400);//parametros malos\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The Note has created correct\", function () {\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"});\r",
									"\r",
									"const expectedResponse = {\r",
									"    \"status\": \"fail\",\r",
									"    \"message\": \"Correo y contraseña requeridos\"\r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"correo\": \"foo\"    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/login",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check not exists session [Test]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(401);\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The Note has created correct\", function () {\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"});\r",
									"\r",
									"const expectedResponse = {\r",
									"    \"status\": \"fail\",\r",
									"    \"message\": \"No hay sesiones activas\"\r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/session",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"session"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to Access without login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(401);\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data has the correct structure\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"const expectedResponse = {\r",
									"    \"status\": \"fail\",\r",
									"    \"message\": \"No autorizado. Inicia sesión primero.\"\r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/casos",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"casos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Loging Role [Test]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The Note has created correct\", function () {\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"data\");\r",
									"});\r",
									"\r",
									"const expectedResponse = {\r",
									"    \"status\": \"success\",\r",
									"    \"message\": \"Login exitoso\",\r",
									"    \"data\": {\r",
									"        \"usuario\": \"Fiscal de Guate\"\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"    pm.expect(responseData.data).to.eql(expectedResponse.data);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"correo\": \"fiscal_1@mp.gob.gt\",\r\n    \"contrasena\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/login",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to Access with incorrect role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(403);\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The data has the correct structure\", function () {\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"});\r",
									"\r",
									"\r",
									"const expectedResponse = {\r",
									"    \"status\": \"fail\",\r",
									"    \"message\": \"No tienes permisos para acceder a este recurso\"\r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/usuarios?fiscalia_id=D4604377-D30D-4A6C-AF07-8F4D40EB0189",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"usuarios"
							],
							"query": [
								{
									"key": "fiscalia_id",
									"value": "D4604377-D30D-4A6C-AF07-8F4D40EB0189"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The Note has created correct\", function () {\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"});\r",
									"\r",
									"const expectedResponse = {\r",
									"  \"status\": \"success\",\r",
									"  \"message\": \"Sesión cerrada exitosamente\"\r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"    pm.expect(responseData.data).to.eql(expectedResponse.data);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/logout",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Lougout [Test]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(401);\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The Note has created correct\", function () {\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"});\r",
									"\r",
									"const expectedResponse = {\r",
									"    \"status\": \"fail\",\r",
									"    \"message\": \"No hay sesiones activas\"\r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"    pm.expect(responseData.data).to.eql(expectedResponse.data);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/session",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"session"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login view",
			"item": [
				{
					"name": "Loging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The Note has created correct\", function () {\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"data\");\r",
									"});\r",
									"\r",
									"const expectedResponse = {\r",
									"    \"status\": \"success\",\r",
									"    \"message\": \"Login exitoso\",\r",
									"    \"data\": {\r",
									"        \"usuario\": \"Fiscal Admin\"\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"    pm.expect(responseData.data).to.eql(expectedResponse.data);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"correo\": \"fiscal@mp.gob.gt\",\r\n    \"contrasena\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/login",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The Note has created correct\", function () {\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"data\");\r",
									"});\r",
									"\r",
									"const expectedResponse = {\r",
									"  \"status\": \"success\",\r",
									"  \"message\": \"Sesión activa\",\r",
									"  \"data\": {\r",
									"    \"usuario\": {\r",
									"      \"id\": \"00000000-0000-0000-0000-000000000000\",\r",
									"      \"nombre\": \"Fiscal Admin\",\r",
									"      \"rol\": \"ADMIN_SYSTEM\"\r",
									"    }\r",
									"  }\r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"    pm.expect(responseData.data).to.eql(expectedResponse.data);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/session",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"session"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Casos view",
			"item": [
				{
					"name": "Casos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data has the correct structure\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Array with data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData.data)).to.be.true;\r",
									"    pm.expect(jsonData.data.length).be.greaterThan(0);\r",
									"});\r",
									"\r",
									"const expectedResponse = {\r",
									"  \"status\": \"success\",\r",
									"  \"message\": \"Lista de casos obtenida correctamente\",\r",
									"  \"data\": [\r",
									"    {\r",
									"      \"id\": \"A888112F-5CC5-4FEE-8A4C-DD8A1F38C6AC\",\r",
									"      \"numero_caso\": \"CASO-2025-001\",\r",
									"      \"nombre\": \"Caso de corrupción en entidad X\",\r",
									"      \"descripcion\": null,\r",
									"      \"estado\": \"pendiente\",\r",
									"      \"usuario_asignado_id\": null,\r",
									"      \"fiscalia_id\": 'D4604377-D30D-4A6C-AF07-8F4D40EB0189',\r",
									"      \"usuario_creacion\": \"00000000-0000-0000-0000-000000000000\",\r",
									"      \"usuario_modificacion\": \"00000000-0000-0000-0000-000000000000\"\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"    \r",
									"    var value = responseData.data[0];\r",
									"    pm.expect(value).has.haveOwnProperty(\"fecha_creacion\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"usuario_creacion\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"fecha_modificacion\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"usuario_modificacion\");\r",
									"\r",
									"    pm.expect(value.id).to.eql(expectedResponse.data[0].id);\r",
									"    pm.expect(value.numero_caso).to.eql(expectedResponse.data[0].numero_caso);\r",
									"    pm.expect(value.nombre).to.eql(expectedResponse.data[0].nombre);\r",
									"    pm.expect(value.descripcion).to.eql(expectedResponse.data[0].descripcion);\r",
									"    pm.expect(value.estado).to.eql(expectedResponse.data[0].estado);\r",
									"    pm.expect(value.usuario_asignado_id).to.eql(expectedResponse.data[0].usuario_asignado_id);\r",
									"    pm.expect(value.fiscalia_id).to.eql(expectedResponse.data[0].fiscalia_id);\r",
									"    pm.expect(value.usuario_creacion).to.eql(expectedResponse.data[0].usuario_creacion);\r",
									"    pm.expect(value.usuario_modificacion).to.eql(expectedResponse.data[0].usuario_modificacion);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/casos",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"casos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fiscalias",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The data has the correct structure\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Array with data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData.data)).to.be.true;\r",
									"    pm.expect(jsonData.data.length).be.greaterThan(0);\r",
									"});\r",
									"\r",
									"const expectedResponse = {\r",
									"  \"status\": \"success\",\r",
									"  \"message\": \"Lista de fiscalías obtenida correctamente\",\r",
									"  \"data\": [\r",
									"    {\r",
									"      \"id\": \"D4604377-D30D-4A6C-AF07-8F4D40EB0189\",\r",
									"      \"nombre\": \"Fiscalía Contra el Crimen Organizado\",\r",
									"      \"ubicacion\": \"Ciudad de Guatemala\",\r",
									"      \"activa\": true\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"\r",
									"    var value = responseData.data[0];\r",
									"    pm.expect(value).has.haveOwnProperty(\"fecha_creacion\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"usuario_creacion\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"fecha_modificacion\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"usuario_modificacion\");\r",
									"\r",
									"    pm.expect(value.id).to.eql(expectedResponse.data[0].id);\r",
									"    pm.expect(value.nombre).to.eql(expectedResponse.data[0].nombre);\r",
									"    pm.expect(value.ubicacion).to.eql(expectedResponse.data[0].ubicacion);\r",
									"    pm.expect(value.activa).to.eql(expectedResponse.data[0].activa);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/fiscalias",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"fiscalias"
							]
						}
					},
					"response": []
				},
				{
					"name": "Users by Fiscalias",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The data has the correct structure\", function () {\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Array with data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData.data)).to.be.true;\r",
									"    pm.expect(jsonData.data.length).be.greaterThan(0);\r",
									"});\r",
									"\r",
									"const expectedResponse = {\r",
									"  \"status\": \"success\",\r",
									"  \"message\": \"Lista de usuarios obtenida correctamente\",\r",
									"  \"data\": [\r",
									"    {\r",
									"      \"id\": \"8A8DD011-A79C-4A40-BEF0-730B51483734\",\r",
									"      \"nombre\": \"Fiscal de Guate\",\r",
									"      \"correo\": \"fiscal_1@mp.gob.gt\",\r",
									"      \"rol\": \"FISCAL\",\r",
									"      \"activo\": true,\r",
									"      \"fiscalia_id\": \"D4604377-D30D-4A6C-AF07-8F4D40EB0189\"\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"    \r",
									"    var value = responseData.data[0];\r",
									"    pm.expect(value).has.haveOwnProperty(\"fecha_creacion\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"usuario_creacion\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"fecha_modificacion\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"usuario_modificacion\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"usuario_modificacion\");\r",
									"\r",
									"    pm.expect(value.id).to.eql(expectedResponse.data[0].id);\r",
									"    pm.expect(value.nombre).to.eql(expectedResponse.data[0].nombre);\r",
									"    pm.expect(value.correo).to.eql(expectedResponse.data[0].correo);\r",
									"    pm.expect(value.rol).to.eql(expectedResponse.data[0].rol);\r",
									"    pm.expect(value.activo).to.eql(expectedResponse.data[0].activo);\r",
									"    pm.expect(value.fiscalia_id).to.eql(expectedResponse.data[0].fiscalia_id);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/usuarios?fiscalia_id=D4604377-D30D-4A6C-AF07-8F4D40EB0189",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"usuarios"
							],
							"query": [
								{
									"key": "fiscalia_id",
									"value": "D4604377-D30D-4A6C-AF07-8F4D40EB0189"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Users by Fiscalias [Test]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"const responseData = pm.response.json();\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The data has the correct structur\", function () {\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Array with data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData.data)).to.be.true;\r",
									"    pm.expect(jsonData.data.length).be.eql(0);\r",
									"});\r",
									"\r",
									"const expectedResponse = {\r",
									"  \"status\": \"success\",\r",
									"  \"message\": \"Lista de usuarios obtenida correctamente\",\r",
									"  \"data\": [ ]\r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"    pm.expect(responseData.data).to.eql(expectedResponse.data);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/usuarios?fiscalia_id=D4604377-0000-0000-0000-8F4D40EB0189",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"usuarios"
							],
							"query": [
								{
									"key": "fiscalia_id",
									"value": "D4604377-0000-0000-0000-8F4D40EB0189"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Caso view",
			"item": [
				{
					"name": "Caso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"\r",
									"\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data has the correct structure\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response data is an Object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.data).to.be.an('object');\r",
									"});\r",
									"\r",
									"const expectedResponse = {\r",
									"  \"status\": \"success\",\r",
									"  \"message\": \"Caso obtenido correctamente\",\r",
									"  \"data\": \r",
									"    {\r",
									"      \"id\": \"A888112F-5CC5-4FEE-8A4C-DD8A1F38C6AC\",\r",
									"      \"numero_caso\": \"CASO-2025-001\",\r",
									"      \"nombre\": \"Caso de corrupción en entidad X\",\r",
									"      \"descripcion\": null,\r",
									"      \"estado\": \"pendiente\",\r",
									"      \"usuario_asignado_id\": null,\r",
									"      \"fiscalia_id\": 'D4604377-D30D-4A6C-AF07-8F4D40EB0189',\r",
									"      \"usuario_creacion\": \"00000000-0000-0000-0000-000000000000\",\r",
									"      \"usuario_modificacion\": \"00000000-0000-0000-0000-000000000000\"\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"    \r",
									"    var value = responseData.data;\r",
									"    pm.expect(value).has.haveOwnProperty(\"fecha_creacion\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"usuario_creacion\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"fecha_modificacion\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"usuario_modificacion\");\r",
									"\r",
									"    pm.expect(value.id).to.eql(expectedResponse.data.id);\r",
									"    pm.expect(value.numero_caso).to.eql(expectedResponse.data.numero_caso);\r",
									"    pm.expect(value.nombre).to.eql(expectedResponse.data.nombre);\r",
									"    pm.expect(value.descripcion).to.eql(expectedResponse.data.descripcion);\r",
									"    pm.expect(value.estado).to.eql(expectedResponse.data.estado);\r",
									"    pm.expect(value.usuario_asignado_id).to.eql(expectedResponse.data.usuario_asignado_id);\r",
									"    pm.expect(value.fiscalia_id).to.eql(expectedResponse.data.fiscalia_id);\r",
									"    pm.expect(value.usuario_creacion).to.eql(expectedResponse.data.usuario_creacion);\r",
									"    pm.expect(value.usuario_modificacion).to.eql(expectedResponse.data.usuario_modificacion);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/casos/:id",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"casos",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "A888112F-5CC5-4FEE-8A4C-DD8A1F38C6AC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(201);//created\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The Note has created correct\", function () {\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"data\");\r",
									"});\r",
									"\r",
									"const expectedResponse = {\r",
									"    \"status\": \"success\",\r",
									"    \"message\": \"Caso creado\",\r",
									"    \"data\": {\r",
									"        \"numero_caso\": \"EXP-2025-123\",\r",
									"        \"nombre\": \"Robo a mano armada\",\r",
									"        \"descripcion\": \"El caso se refiere a un robo ocurrido en zona 1.\",\r",
									"        \"fiscalia_id\": \"D4604377-D30D-4A6C-AF07-8F4D40EB0189\",\r",
									"        \"fiscal_asignado_id\": null,\r",
									"        \"usuario_creacion\": \"00000000-0000-0000-0000-000000000000\",\r",
									"        \"usuario_modificacion\": \"00000000-0000-0000-0000-000000000000\"\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"\r",
									"    const value = responseData.data;\r",
									"    pm.expect(value).has.haveOwnProperty(\"id\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"fecha_creacion\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"fecha_modificacion\");\r",
									"\r",
									"    const expectedData = expectedResponse.data;\r",
									"    pm.expect(value.numero_caso).to.eql(expectedData.numero_caso);\r",
									"    pm.expect(value.nombre).to.eql(expectedData.nombre);\r",
									"    pm.expect(value.descripcion).to.eql(expectedData.descripcion);\r",
									"    pm.expect(value.estado).to.eql(expectedData.estado);\r",
									"    pm.expect(value.usuario_asignado_id).to.eql(expectedData.usuario_asignado_id);\r",
									"    pm.expect(value.fiscalia_id).to.eql(expectedData.fiscalia_id);\r",
									"    pm.expect(value.fiscal_asignado_id).to.eql(expectedData.fiscal_asignado_id);\r",
									"    pm.expect(value.usuario_creacion).to.eql(expectedData.usuario_creacion);\r",
									"    pm.expect(value.usuario_modificacion).to.eql(expectedData.usuario_modificacion);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"numero_caso\": \"EXP-2025-123\",\r\n  \"nombre\": \"Robo a mano armada\",\r\n  \"descripcion\": \"El caso se refiere a un robo ocurrido en zona 1.\",\r\n  \"fiscalia_id\": \"D4604377-D30D-4A6C-AF07-8F4D40EB0189\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/casos",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"casos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create with fiscal_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(409);//conflict\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The Note has created correct\", function () {\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"data\");\r",
									"});\r",
									"\r",
									"const expectedResponse = {\r",
									"    \"status\": \"success\",\r",
									"    \"message\": \"Caso creado\",\r",
									"    \"data\": {\r",
									"        \"numero_caso\": \"EXP-2025-124\",\r",
									"        \"nombre\": \"Robo a mano armada\",\r",
									"        \"descripcion\": \"El caso se refiere a un robo ocurrido en zona 2.\",\r",
									"        \"fiscalia_id\": \"D4604377-D30D-4A6C-AF07-8F4D40EB0189\",\r",
									"        \"fiscal_asignado_id\": \"8A8DD011-A79C-4A40-BEF0-730B51483734\",\r",
									"        \"usuario_creacion\": \"00000000-0000-0000-0000-000000000000\",\r",
									"        \"usuario_modificacion\": \"00000000-0000-0000-0000-000000000000\"\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"\r",
									"    const value = responseData.data;\r",
									"    pm.expect(value).has.haveOwnProperty(\"id\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"fecha_creacion\");\r",
									"    pm.expect(value).has.haveOwnProperty(\"fecha_modificacion\");\r",
									"\r",
									"    const expectedData = expectedResponse.data;\r",
									"    pm.expect(value.numero_caso).to.eql(expectedData.numero_caso);\r",
									"    pm.expect(value.nombre).to.eql(expectedData.nombre);\r",
									"    pm.expect(value.descripcion).to.eql(expectedData.descripcion);\r",
									"    pm.expect(value.estado).to.eql(expectedData.estado);\r",
									"    pm.expect(value.usuario_asignado_id).to.eql(expectedData.usuario_asignado_id);\r",
									"    pm.expect(value.fiscalia_id).to.eql(expectedData.fiscalia_id);\r",
									"    pm.expect(value.fiscal_asignado_id).to.eql(expectedData.fiscal_asignado_id);\r",
									"    pm.expect(value.usuario_creacion).to.eql(expectedData.usuario_creacion);\r",
									"    pm.expect(value.usuario_modificacion).to.eql(expectedData.usuario_modificacion);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"numero_caso\": \"EXP-2025-124\",\r\n  \"nombre\": \"Robo a mano armada\",\r\n  \"descripcion\": \"El caso se refiere a un robo ocurrido en zona 1.\",\r\n  \"fiscalia_id\": \"D4604377-D30D-4A6C-AF07-8F4D40EB0189\",\r\n  \"fiscal_asignado_id\":\"8A8DD011-A79C-4A40-BEF0-730B51483734\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/casos",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"casos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Try to create with duplicated number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(409);//conflict\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The Note has created correct\", function () {\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"});\r",
									"\r",
									"const expectedResponse = {\r",
									"    \"status\": \"fail\",\r",
									"    \"message\": \"Ya existe un caso con ese número\",\r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"numero_caso\": \"EXP-2025-124\",\r\n  \"nombre\": \"Robo a mano armada\",\r\n  \"descripcion\": \"El caso se refiere a un robo ocurrido en zona 1.\",\r\n  \"fiscalia_id\": \"D4604377-D30D-4A6C-AF07-8F4D40EB0189\",\r\n  \"fiscal_asignado_id\":\"8A8DD011-A79C-4A40-BEF0-730B51483734\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/casos",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"casos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(409);//conflict\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"The Note has created correct\", function () {\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"data\");\r",
									"});\r",
									"\r",
									"const expectedResponse = {\r",
									"    \"status\": \"success\",\r",
									"    \"message\": \"Caso actualizado correctamente\",\r",
									"    \"data\": {\r",
									"        \"id\": \"A888112F-5CC5-4FEE-8A4C-DD8A1F38C6AC\",\r",
									"        \"numero_caso\": \"CASO-2025-001\",\r",
									"        \"nombre\": \"Caso de corrupción en entidad Y\",\r",
									"        \"descripcion\": \"Actualización de detalles del caso\",\r",
									"        \"estado\": \"cerrado\",\r",
									"        \"usuario_asignado_id\": null,\r",
									"        \"fiscalia_id\": \"D4604377-D30D-4A6C-AF07-8F4D40EB0189\",\r",
									"        \"usuario_creacion\": \"00000000-0000-0000-0000-000000000000\",\r",
									"        \"usuario_modificacion\": \"00000000-0000-0000-0000-000000000000\"\r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nombre\": \"Caso de corrupción en entidad Y\",\r\n  \"descripcion\": \"Actualización de detalles del caso\",\r\n  \"estado\": \"cerrado\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/casos/:id",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"casos",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "A888112F-5CC5-4FEE-8A4C-DD8A1F38C6AC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Log asignaciones",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Status code returned Created correct\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									" });\r",
									"\r",
									"pm.test(\"Content-Type is json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Result is an Object\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Data has the correct structure\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"status\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"message\");\r",
									"    pm.expect(responseData).has.haveOwnProperty(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"Result is an Array with data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData.data)).to.be.true;\r",
									"});\r",
									"\r",
									"const expectedResponse = {\r",
									"  \"status\": \"success\",\r",
									"  \"message\": \"Historial de asignaciones obtenido correctamente\",\r",
									"  \"data\": [ ]\r",
									"    \r",
									"}\r",
									"\r",
									"pm.test(\"The data is the correct\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    pm.expect(responseData.status).to.eql(expectedResponse.status);\r",
									"    pm.expect(responseData.message).to.eql(expectedResponse.message);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/casos/:id/log-asignaciones",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"casos",
								":id",
								"log-asignaciones"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reasignar view",
			"item": [
				{
					"name": "Reasignar",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nuevo_fiscal_id\": \"uuid-del-nuevo-fiscal\",\r\n  \"motivo\": \"Cambio de turno\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/{{app_base}}/v1/casos/:id/reasignar",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"{{app_base}}",
								"v1",
								"casos",
								":id",
								"reasignar"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "localhost",
			"type": "string"
		},
		{
			"key": "port",
			"value": "3000",
			"type": "string"
		},
		{
			"key": "app_base",
			"value": "api",
			"type": "string"
		}
	]
}